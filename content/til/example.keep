---
title: 'Effective Docker BuildX Caching'
date: 2025-03-10
summary: 'Improving Docker build times with BuildX advanced caching'
tags: ['docker', 'performance', 'devops']
---

Today I learned how to significantly speed up Docker builds using BuildX's advanced caching capabilities.

The key is using the `--cache-from` and `--cache-to` options with BuildX to store and reuse the build cache across different machines or CI/CD pipelines.

## Basic setup

First, make sure you have BuildX enabled:

```bash
docker buildx create --use
```

## Exporting and importing cache

To export the cache to a local file during a build:

```bash
docker buildx build \
  --cache-to type=local,dest=./docker-cache \
  -t myapp:latest .
```

To use a previously exported cache:

```bash
docker buildx build \
  --cache-from type=local,src=./docker-cache \
  -t myapp:latest .
```

## Using registry-based caching

Even better for CI/CD, you can store the cache in a registry:

```bash
docker buildx build \
  --cache-to type=registry,ref=myregistry.io/myapp:cache \
  --cache-from type=registry,ref=myregistry.io/myapp:cache \
  -t myapp:latest \
  --push .
```

This way, the cache is stored alongside your images and can be pulled by any machine or CI runner with access to your registry.

## Results

Using these techniques has reduced our CI build times by over 70% for complex images, especially when dependencies don't change frequently. The first build still takes the normal time, but subsequent builds become much faster.
